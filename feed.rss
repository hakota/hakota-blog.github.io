<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>hakota's Blog</title><description>日々の開発の話</description><link>https://hakota.github.io</link><language>ja</language><lastBuildDate>Sun, 22 Jan 2023 20:46:46 +0900</lastBuildDate><pubDate>Sun, 22 Jan 2023 20:46:46 +0900</pubDate><ttl>250</ttl><atom:link href="https://hakota.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hakota.github.io/posts/2023/20230121</guid><title>ADEPからカスタムAppに移行した話</title><description>ADEPからカスタムAppへ切り替えた時の話</description><link>https://hakota.github.io/posts/2023/20230121</link><pubDate>Sat, 21 Jan 2023 12:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>ADEPからカスタムAppに移行した話</h1><h2>はじめに</h2><p>皆さんは、<a href="https://developer.apple.com/jp/programs/enterprise/">ADEP(Apple Developer Enterprise Program)</a> を利用したことはありますか？ ADEPはMDMなどを用いて社内の業務用アプリなどを開発し配布するためのProgramです。 弊社でもADEPで社内向けアプリを配布していましたが、<a href="https://www.micss.biz/2020/06/19/1774/">Appleが意図していないADEPの使用方法が横行</a>したことで Appleは規制を強化しはじめました。 弊社もより安全に社内向けアプリを配布できるようにするため（規制がどうなるかわからないので）代替となるカスタムAppへ移行しようという話になりました。</p><table border="1">
<tr><th><img src="https://hakota.github.io/Assets/20230121_01.png"></th></tr>
</table><h2>カスタムAppとは？</h2><blockquote><p><a href="https://developer.apple.com/jp/custom-apps/">カスタムApp</a> 企業や教育機関の個々のニーズに応えるカスタムAppをデザインし、開発しましょう。<a href="https://support.apple.com/ja-jp/guide/apple-business-manager/welcome/web">Apple Business Manager</a> および <a href="https://support.apple.com/ja-jp/guide/apple-school-manager/welcome/web">Apple School Manager</a> を使うと、 Appを特定のパートナー、クライアント、フランチャイズに対して、 非公開かつ安全に配信することができます。また、組織内の従業員に独自のAppを配信することもできます。</p></blockquote><p>Enterpriseに代わる社内やパートナーに対してアプリをプライベートで配信可能なソリューションの一つとしてAppleから提供されています。</p><h2>ADEPとの違い</h2><p>カスタムAppは、Apple Developer Program を利用します。 つまり、通常のアプリのように審査のフローが発生します。 なので、レビューのガイドラインに違反していたり、不備があったりしたらリジェクトされます。 今まで社内アプリだったので、その辺を正しく対応していなかった場合は注意が必要です。 例えば Apple Developer Program だと<a href="https://developer.apple.com/jp/app-store/review/guidelines/#legal">プライバシーポリシーのURLが必須かつアプリ内からも参照できるようにしないとリジェクトの対象</a>になります。 考慮していなかった場合は準備をしましょう。</p><table border="1">
<tr><th><img src="https://hakota.github.io/Assets/20230121_02.png"></th></tr>
</table><h2>通常の Apple Developer Program との違い</h2><p>※弊社は既にApple Business Managerに加入していたので登録まわりの話は省きます。</p><p>基本的には新しいアプリをApple Developer Programに追加することと大差がありません。違いとしては、審査に提出する前に価格および配信設定で非公開を選ぶことです。</p><table border="1">
<tr><th><img src="https://hakota.github.io/Assets/20230121_03.png"></th></tr>
</table><p>組織IDと組織名を入力する欄があるので、そちらにApple Business Managerの該当の文字列を追加してから、審査に提出します。審査通過後に公開ボタンを押すと以下のアラートが表示されます。</p><table border="1">
<tr><th><img src="https://hakota.github.io/Assets/20230121_04.png"></th></tr>
</table><p>AppStore上には反映されずに、Apple Business Manager上に表示されるようになります。もし、カスタムAppの項目が表示されていない場合は<a href="https://pai-r.com/pdf/AppleBusinessManager_Manual_ver.1.00.pdf">設定から有効にする</a>必要があります。</p><h2>その他</h2><p>ADEPからApple Developer Programに変更ということは、アプリの登録を再度行うことになりますが、ADEPで使用していたBundleIDは利用できないので新しいものを考えて設定する必要があります。</p><table border="1">
  <tr>
    <th>同じBundleIDを指定した場合に表示されるダイアログ</th>
  </tr>
  <tr>
    <td> <img src="https://hakota.github.io/Assets/20230121_01.png"> </td>
  </tr>
</table><p>同じBundleIDを指定した場合に表示されるダイアログ また、BundleIDに依存しているサードパーティのツールやSDKなどの設定、Push通知等も軒並み変更する作業が必要です。（FirebaseやGoogleMaps SDKなど）</p><h2>まとめ</h2><p>より安全な方法で社内向けアプリを配布することができるようになりました。 しかし、審査のフローが入ることで今までよりも社内展開するのが遅くなったり、常にサポートをやっていかないといざというときに審査に提出すら、すぐにできない状況に陥ってしまうので注意が必要です。 （例えば、古いAPIを呼び出している等）その他には、Apple Developer Programの支払いだけで社内展開ができるようになるので、金銭的なメリットはあったりします。</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hakota.github.io/posts/2023/20230119</guid><title>SwiftUIでFooterを実装する</title><description>SafeAreaを意識しつつ、キーボードに押し上げられない下部固定のFooterを実装する方法</description><link>https://hakota.github.io/posts/2023/20230119</link><pubDate>Fri, 20 Jan 2023 00:50:00 +0900</pubDate><content:encoded><![CDATA[<h1>SwiftUIでFooterを実装する</h1><h2>はじめに</h2><p>SafeAreaの有無でFooterの下部のpaddingを変えたい場合は、<code>.edgesIgnoringSafeArea(.bottom)</code> などで可能ですが キーボードが表示される画面だとキーボードと干渉して、FooterのViewがキーボードの上まで引き上げられてしまいます。</p><h2>回避策</h2><p>SafeAreaを <code>GeometryReader</code> 経由で取得し、SafeArea.bottomの高さを持つ背景色と同じColorを追加します。 ただし、キーボードが表示されるタイミングでは参照しないようにする。※例では分かりやすいように色を別で表示しています</p><pre><code>

<span class="keyword">struct</span> FooterView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> isShowingKeyboard: <span class="type">Bool</span> = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">GeometryReader</span> { geometry <span class="keyword">in</span>
            <span class="type">VStack</span>(spacing: .<span class="dotAccess">zero</span>) {
                <span class="type">Spacer</span>()

                <span class="type">HStack</span> {
                    <span class="type">Spacer</span>()

                    <span class="type">Button</span>(
                        action: {},
                        label: {
                            <span class="type">Text</span>(<span class="string">"Button"</span>)
                                .<span class="call">padding</span>()
                                .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">green</span>)
                        }
                    )

                    <span class="type">Spacer</span>()
                }
                .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>)

                <span class="type">Color</span>.<span class="property">red</span>
                    .<span class="call">frame</span>(height: <span class="keyword">self</span>.<span class="property">isShowingKeyboard</span> ? .<span class="dotAccess">zero</span> : geometry.<span class="property">safeAreaInsets</span>.<span class="property">bottom</span>)
            }
            .<span class="call">ignoresSafeArea</span>() <span class="comment">// GeometryReader自体に付与してしまうとSafeAreaが取得できなくなるので中身につける</span>
        }
        .<span class="call">onReceive</span>(
            <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIResponder</span>.<span class="property">keyboardWillShowNotification</span>)
        ) { <span class="keyword">_ in
            self</span>.<span class="property">isShowingKeyboard</span> = <span class="keyword">true</span>
        }
        .<span class="call">onReceive</span>(
            <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIResponder</span>.<span class="property">keyboardWillHideNotification</span>)
        ) { <span class="keyword">_ in
            self</span>.<span class="property">isShowingKeyboard</span> = <span class="keyword">false</span>
        }
    }
}
</code></pre><table border="0">
    <tr>
      <th>SafeArea.bottom有り</th>
      <th>SafeArea.bottom無し</th>
    </tr>
    <tr>
      <td> <img src="https://hakota.github.io/Assets/20230119_1.png"> </td>
      <td> <img src="https://hakota.github.io/Assets/20230119_2.png"> </td>
    </tr>
</table>]]></content:encoded></item><item><guid isPermaLink="true">https://hakota.github.io/posts/2023/20230118</guid><title>はじめまして</title><description>挨拶の記事</description><link>https://hakota.github.io/posts/2023/20230118</link><pubDate>Wed, 18 Jan 2023 22:15:00 +0900</pubDate><content:encoded><![CDATA[<h1>はじめまして</h1><p>hakotaと申します。長崎出身の92・93年世代です。今は京都に住んでます。主にiOSアプリ開発を生業としてます。 こちらでは備忘録的な技術のメモなどを主に投稿していこうと思っています。 更新頻度も不定期で、ゆるーく長くできたらいいなと思います。 よろしくおねがいします。</p>]]></content:encoded></item></channel></rss>